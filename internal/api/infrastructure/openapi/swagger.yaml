openapi: 3.0.3
info:
  title: Checklist Microservices API
  description: API for managing tasks, users, and profiles in a microservices architecture
  version: "1.0.0"
  contact:
    email: "support@example.com"
servers:
  - url: http://localhost:8080
    description: Local development server
paths:
  /register:
    post:
      summary: Register a new user
      description: Registers a user with email and password, optionally enabling 2FA
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful registration
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  email:
                    type: string
                    format: email
        '400':
          description: Bad Request
  /login:
    post:
      summary: Login a user
      description: Logs in a user with email and password, returning JWT and Refresh tokens
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Unauthorized
  /2fa/setup:
    post:
      summary: Setup 2FA for user
      description: Sets up two-factor authentication for the authenticated user
      tags:
        - Authentication
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: 2FA setup successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
        '400':
          description: Bad Request
  /2fa/verify:
    post:
      summary: Verify 2FA code
      description: Verifies the 2FA code for the authenticated user
      tags:
        - Authentication
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: uuid
                code:
                  type: string
      responses:
        '200':
          description: 2FA verification successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
        '400':
          description: Bad Request
  /create:
    post:
      summary: Create a new task
      description: Creates a new task for the authenticated user
      tags:
        - Tasks
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized
        '400':
          description: Bad Request
  /list:
    get:
      summary: Get list of tasks
      description: Retrieves the list of tasks for the authenticated user
      tags:
        - Tasks
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized
  /delete:
    delete:
      summary: Delete a task
      description: Deletes a task by its ID for the authenticated user
      tags:
        - Tasks
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Task deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Task not found
  /done:
    put:
      summary: Mark a task as done
      description: Marks a task as done by its ID for the authenticated user
      tags:
        - Tasks
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Task marked as done
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized
        '404':
          description: Task not found
  /profile:
    get:
      summary: Get user profile
      description: Retrieves the profile of the authenticated user
      tags:
        - Profile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
    put:
      summary: Update user profile
      description: Updates the profile of the authenticated user (avatar, description, socials)
      tags:
        - Profile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
        '400':
          description: Bad Request
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - email
        - password
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - email
        - password
    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
    Task:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        content:
          type: string
        done:
          type: boolean
        user_id:
          type: string
          format: uuid
      required:
        - title
    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        avatar:
          type: string
        description:
          type: string
        socials:
          type: object
          additionalProperties:
            type: string
    UserProfileUpdate:
      type: object
      properties:
        avatar:
          type: string
        description:
          type: string
        socials:
          type: object
          additionalProperties:
            type: string